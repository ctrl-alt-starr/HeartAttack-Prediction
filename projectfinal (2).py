# -*- coding: utf-8 -*-
"""projectFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lpxCWitnSSylxg8YWzci0F-xCILMtBL3
"""

import pandas as pd
data=pd.read_csv("/heart.csv")

from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

data.head(2)

data.describe()

data.groupby("target").size()

data.hist()

from pandas.plotting import scatter_matrix
scatter_matrix(data)

import seaborn as sns
corr=data.corr()
sns.heatmap(corr)

data=pd.read_csv("/heart.csv")
data=data.drop(labels=["trestbps","chol","thal","fbs","thalach","oldpeak","exang"],axis=1)
data.head(1)

from sklearn.model_selection import train_test_split
data_array=data.values
x=data_array[:,0:6]
y=data_array[:,6]
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.125,random_state=1)

models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))
# evaluate each model in turn
results = []
names = []
for name, model in models:
	kfold = StratifiedKFold(n_splits=3, random_state=1, shuffle=True)
	cv_results = cross_val_score(model, x_train, y_train, cv=kfold, scoring='accuracy')
	results.append(cv_results)
	names.append(name)
	print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))

model=LogisticRegression()
model.fit(x_train,y_train)
prediction=model.predict_proba(x_test)
predictions=model.predict(x_test)
data2=data.iloc[:,0:6]
data2.head(0)
data2=pd.DataFrame(x_test,columns=data2.columns)
print("The accuracy of our model is ")
print(accuracy_score(y_test, predictions))